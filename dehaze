import rclpy
from rclpy.node import Node
import pyrealsense2 as rs
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

class HybridDehazeNode(Node):
    def __init__(self):
        super().__init__('hybrid_dehaze_node')

        self.publisher_ = self.create_publisher(Image, 'hybrid_dehazed_image', 10)
        self.bridge = CvBridge()

        # RealSense 파이프라인
        self.pipeline = rs.pipeline()
        config = rs.config()
        config.enable_stream(rs.stream.color, 848, 480, rs.format.bgr8, 30)
        config.enable_stream(rs.stream.depth, 848, 480, rs.format.z16, 30)
        config.enable_stream(rs.stream.infrared, 1, 848, 480, rs.format.y8, 30)
        self.profile = self.pipeline.start(config)

        # IR emitter 켜기
        depth_sensor = self.profile.get_device().first_depth_sensor()
        depth_sensor.set_option(rs.option.emitter_enabled, 1)
        depth_sensor.set_option(rs.option.laser_power, 150)
        self.get_logger().info("IR emitter enabled for NIR imaging.")

        self.timer = self.create_timer(0.1, self.timer_callback)

    def hybrid_dehaze(self, color_img, nir_img, depth_img):
        color_float = color_img.astype(np.float32)
        nir_float = nir_img.astype(np.float32)

        # --- 1. Dark Channel (Color) ---
        patch_size = 15
        min_channel = np.min(color_float, axis=2)
        dark_channel = cv2.erode(min_channel, np.ones((patch_size, patch_size), np.uint8))

        # --- 2. Atmosphere light ---
        numpx = max(1, int(color_img.size * 0.001))
        flat_img = color_float.reshape((-1,3))
        dark_flat = dark_channel.flatten()
        indices = np.argsort(dark_flat)[-numpx:]
        A = np.mean(flat_img[indices], axis=0)

        # --- 3. Omega 조절 ---
        dark_mean = np.mean(dark_channel) / 255.0
        omega = np.clip(1.0 - dark_mean, 0.4, 0.95)

        # --- 4. Transmission map ---
        transmission = 1 - omega * (dark_channel / 255.0)

        # --- 5. Depth 기반 가중치 적용 (멀수록 안개 제거 강화) ---
        depth_norm = cv2.normalize(depth_img, None, 0, 1, cv2.NORM_MINMAX)
        transmission = transmission * (1 - 0.5 * depth_norm)  # 가까운 건 그대로, 먼 건 안개 제거 강화
        transmission = np.clip(transmission, 0.4, 1.0)

        # --- 6. NIR 기반 가중치 적용 ---
        nir_norm = cv2.normalize(nir_float, None, 0, 1, cv2.NORM_MINMAX)
        transmission = transmission * (1 - 0.3 * (1 - nir_norm))  # 어두운 NIR 영역 가중

        # --- 7. Image 복원 ---
        J = np.empty_like(color_float)
        for c in range(3):
            J[:,:,c] = (color_float[:,:,c] - A[c]) / transmission + A[c]
        J = np.clip(J, 0, 255).astype(np.uint8)

        # --- 8. CLAHE 적용 ---
        lab = cv2.cvtColor(J, cv2.COLOR_BGR2LAB)
        l, a, b = cv2.split(lab)
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
        cl = clahe.apply(l)
        J_clahe = cv2.cvtColor(cv2.merge((cl,a,b)), cv2.COLOR_LAB2BGR)

        self.get_logger().info(f"Dark mean: {dark_mean:.3f}, Omega: {omega:.3f}")
        return J_clahe

    def timer_callback(self):
        frames = self.pipeline.wait_for_frames()
        color_frame = frames.get_color_frame()
        ir_frame = frames.get_infrared_frame(1)
        depth_frame = frames.get_depth_frame()
        if not color_frame or not ir_frame or not depth_frame:
            return

        color_image = np.asanyarray(color_frame.get_data())
        nir_image = np.asanyarray(ir_frame.get_data())
        depth_image = np.asanyarray(depth_frame.get_data())

        dehazed_image = self.hybrid_dehaze(color_image, nir_image, depth_image)

        # ROS 퍼블리시
        img_msg = self.bridge.cv2_to_imgmsg(dehazed_image, encoding='bgr8')
        self.publisher_.publish(img_msg)

        # 화면 출력
        combined = np.hstack((
            color_image,
            cv2.cvtColor(nir_image, cv2.COLOR_GRAY2BGR),
            dehazed_image
        ))
        cv2.imshow('Color | NIR | Hybrid Dehazed', combined)
        if cv2.waitKey(1) & 0xFF == 27:
            rclpy.shutdown()

    def destroy_node(self):
        self.pipeline.stop()
        cv2.destroyAllWindows()
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    node = HybridDehazeNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
